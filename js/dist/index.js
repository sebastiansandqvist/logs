"use strict";
// Do not edit, this file was generated by github.com/apex/rpc.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
let fetch = typeof window !== 'undefined' ? window.fetch : null;
if (!fetch) {
    fetch = require('node-fetch');
}
/**
* Call method with params via a POST request.
*/
function call(url, authToken, method, params) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield fetch(url + '/' + method, {
            method: 'POST',
            body: JSON.stringify(params),
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${authToken}`
            }
        });
        // we have an error, try to parse a well-formed json
        // error response, otherwise default to status code
        if (res.status >= 300) {
            let err;
            try {
                const { type, message } = yield res.json();
                err = new Error(message);
                err.type = type;
            }
            catch (_a) {
                err = new Error(`${res.status} ${res.statusText}`);
            }
            throw err;
        }
        return res.text();
    });
}
const reISO8601 = /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/;
/**
 * Client is the API client.
 */
class Client {
    /**
     * Initialize.
     */
    constructor(params) {
        this.url = params.url;
        this.authToken = params.authToken;
    }
    /**
     * Decoder is used as the reviver parameter when decoding responses.
     */
    decoder(key, value) {
        return typeof value == 'string' && reISO8601.test(value)
            ? new Date(value)
            : value;
    }
    /**
     * addAlert: creates a new alert.
     */
    addAlert(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'add_alert', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * addEvents: ingests a batch of events.
     */
    addEvents(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'add_events', params);
        });
    }
    /**
     * addNotification: creates a new notification.
     */
    addNotification(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'add_notification', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * addProject: creates a new project.
     */
    addProject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'add_project', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * addSearch: creates a new saved search.
     */
    addSearch(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'add_search', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * addToken: creates a new token.
     */
    addToken(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'add_token', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getAlert: returns an alert.
     */
    getAlert(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_alert', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getAlerts: returns all alerts in a project.
     */
    getAlerts(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_alerts', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getBooleanFieldStats: returns field statistics for a boolean field.
     */
    getBooleanFieldStats(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_boolean_field_stats', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getCount: performs a search query against the log events, returning the number of matches.
     */
    getCount(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_count', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getDiscoveredFields: returns fields discovered in the provided time range.
     */
    getDiscoveredFields(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_discovered_fields', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getInstanceConfig: returns instance configuration.
     */
    getInstanceConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_instance_config');
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getNotification: returns a notification.
     */
    getNotification(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_notification', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getNotifications: returns all notifications.
     */
    getNotifications(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_notifications', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getNumericFieldStats: returns field statistics for a numeric field.
     */
    getNumericFieldStats(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_numeric_field_stats', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getProjectStats: returns project statistics.
     */
    getProjectStats(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_project_stats', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getProjects: returns all projects.
     */
    getProjects() {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_projects');
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getSearches: returns all saved searches in a project.
     */
    getSearches(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_searches', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getStringFieldStats: returns field statistics for a string field.
     */
    getStringFieldStats(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_string_field_stats', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getTimeseries: returns a timeseries of event counts in the provided time range.
     */
    getTimeseries(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_timeseries', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * getTokens: returns all tokens.
     */
    getTokens() {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'get_tokens');
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * query: performs a SQL query against the log events.
     */
    query(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'query', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * removeAlert: removes an alert.
     */
    removeAlert(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'remove_alert', params);
        });
    }
    /**
     * removeNotification: removes a notification.
     */
    removeNotification(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'remove_notification', params);
        });
    }
    /**
     * removeProject: removes a project.
     */
    removeProject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'remove_project', params);
        });
    }
    /**
     * removeSearch: removes a saved search.
     */
    removeSearch(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'remove_search', params);
        });
    }
    /**
     * removeToken: removes a token.
     */
    removeToken(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'remove_token', params);
        });
    }
    /**
     * search: performs a search query against the log events.
     */
    search(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield call(this.url, this.authToken, 'search', params);
            let out = JSON.parse(res, this.decoder);
            return out;
        });
    }
    /**
     * testAlert: test the alert configuration.
     */
    testAlert(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'test_alert', params);
        });
    }
    /**
     * updateAlert: updates an alert.
     */
    updateAlert(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'update_alert', params);
        });
    }
    /**
     * updateNotification: updates a notification.
     */
    updateNotification(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'update_notification', params);
        });
    }
    /**
     * updateProject: updates a project.
     */
    updateProject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'update_project', params);
        });
    }
    /**
     * updateSearch: updates a saved search.
     */
    updateSearch(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield call(this.url, this.authToken, 'update_search', params);
        });
    }
}
exports.Client = Client;
