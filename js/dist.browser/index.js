// Do not edit, this file was generated by github.com/apex/rpc.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var fetch = typeof window !== 'undefined' ? window.fetch : null;
if (!fetch) {
    fetch = require('node-fetch');
}
/**
* Call method with params via a POST request.
*/
function call(url, authToken, method, params) {
    return __awaiter(this, void 0, void 0, function () {
        var res, err, _a, type, message, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, fetch(url + '/' + method, {
                        method: 'POST',
                        body: JSON.stringify(params),
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': "Bearer " + authToken
                        }
                    })
                    // we have an error, try to parse a well-formed json
                    // error response, otherwise default to status code
                ];
                case 1:
                    res = _c.sent();
                    if (!(res.status >= 300)) return [3 /*break*/, 6];
                    err = void 0;
                    _c.label = 2;
                case 2:
                    _c.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, res.json()];
                case 3:
                    _a = _c.sent(), type = _a.type, message = _a.message;
                    err = new Error(message);
                    err.type = type;
                    return [3 /*break*/, 5];
                case 4:
                    _b = _c.sent();
                    err = new Error(res.status + " " + res.statusText);
                    return [3 /*break*/, 5];
                case 5: throw err;
                case 6: return [2 /*return*/, res.text()];
            }
        });
    });
}
var reISO8601 = /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/;
/**
 * Client is the API client.
 */
var Client = /** @class */ (function () {
    /**
     * Initialize.
     */
    function Client(params) {
        this.url = params.url;
        this.authToken = params.authToken;
    }
    /**
     * Decoder is used as the reviver parameter when decoding responses.
     */
    Client.prototype.decoder = function (key, value) {
        return typeof value == 'string' && reISO8601.test(value)
            ? new Date(value)
            : value;
    };
    /**
     * addAlert: creates a new alert.
     */
    Client.prototype.addAlert = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'add_alert', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * addEvents: ingests a batch of events.
     */
    Client.prototype.addEvents = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'add_events', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * addNotification: creates a new notification.
     */
    Client.prototype.addNotification = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'add_notification', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * addProject: creates a new project.
     */
    Client.prototype.addProject = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'add_project', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * addSearch: creates a new saved search.
     */
    Client.prototype.addSearch = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'add_search', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * addToken: creates a new token.
     */
    Client.prototype.addToken = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'add_token', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getAlert: returns an alert.
     */
    Client.prototype.getAlert = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_alert', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getAlerts: returns all alerts in a project.
     */
    Client.prototype.getAlerts = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_alerts', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getBooleanFieldStats: returns field statistics for a boolean field.
     */
    Client.prototype.getBooleanFieldStats = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_boolean_field_stats', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getCount: performs a search query against the log events, returning the number of matches.
     */
    Client.prototype.getCount = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_count', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getDiscoveredFields: returns fields discovered in the provided time range.
     */
    Client.prototype.getDiscoveredFields = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_discovered_fields', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getInstanceConfig: returns instance configuration.
     */
    Client.prototype.getInstanceConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_instance_config')];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getNotification: returns a notification.
     */
    Client.prototype.getNotification = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_notification', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getNotifications: returns all notifications.
     */
    Client.prototype.getNotifications = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_notifications', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getNumericFieldStats: returns field statistics for a numeric field.
     */
    Client.prototype.getNumericFieldStats = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_numeric_field_stats', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getProjectStats: returns project statistics.
     */
    Client.prototype.getProjectStats = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_project_stats', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getProjects: returns all projects.
     */
    Client.prototype.getProjects = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_projects')];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getSearches: returns all saved searches in a project.
     */
    Client.prototype.getSearches = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_searches', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getStringFieldStats: returns field statistics for a string field.
     */
    Client.prototype.getStringFieldStats = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_string_field_stats', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getTimeseries: returns a timeseries of event counts in the provided time range.
     */
    Client.prototype.getTimeseries = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_timeseries', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * getTokens: returns all tokens.
     */
    Client.prototype.getTokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'get_tokens')];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * query: performs a SQL query against the log events.
     */
    Client.prototype.query = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'query', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * removeAlert: removes an alert.
     */
    Client.prototype.removeAlert = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'remove_alert', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * removeNotification: removes a notification.
     */
    Client.prototype.removeNotification = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'remove_notification', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * removeProject: removes a project.
     */
    Client.prototype.removeProject = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'remove_project', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * removeSearch: removes a saved search.
     */
    Client.prototype.removeSearch = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'remove_search', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * removeToken: removes a token.
     */
    Client.prototype.removeToken = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'remove_token', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * search: performs a search query against the log events.
     */
    Client.prototype.search = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'search', params)];
                    case 1:
                        res = _a.sent();
                        out = JSON.parse(res, this.decoder);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * testAlert: test the alert configuration.
     */
    Client.prototype.testAlert = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'test_alert', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * updateAlert: updates an alert.
     */
    Client.prototype.updateAlert = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'update_alert', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * updateNotification: updates a notification.
     */
    Client.prototype.updateNotification = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'update_notification', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * updateProject: updates a project.
     */
    Client.prototype.updateProject = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'update_project', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * updateSearch: updates a saved search.
     */
    Client.prototype.updateSearch = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, call(this.url, this.authToken, 'update_search', params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Client;
}());
export { Client };
